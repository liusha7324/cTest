* R8C/Tiny,M16C SERIES ASSEMBLER *   SOURCE LIST       Thu Apr 15 08:52:19 2010  PAGE 001

  SEQ.  LOC.   OBJ.              0XMSDA ....*....SOURCE STATEMENT....7....*....8....*....9....*....0....*....1....*....2....*....3....*....4

     1                                  ;*************************************************************************** ;
     2                                  ;	C COMPILER for M16C/60
     3                                  ;	Copyright 1995-1998 MITSUBISHI ELECTRIC CORPORATION
     4                                  ;	AND MITSUBISHI ELECTRIC SEMICONDUCTOR SYSTEMS CORPORATION
     5                                  ;	All Rights Reserved.
     6                                  ;
     7                                  ;       ncrt0.a30 : NC30 startup program
     8                                  ;
     9                                  ;	This program is applicable when using the basic I/O library
    10                                  ;       
    11                                  ;       $Id: ncrt0.a30,v 1.9 97/11/05 11:27:21 ookura Exp $
    12                                  ;
    13                                  ;***************************************************************************
    14                                  
    15                                  ;---------------------------------------------------------------------
    16                                  ; HEEP SIZE definition
    17                                  ;---------------------------------------------------------------------
    18  00000000h                       HEAPSIZE	.equ	000h
    19                                  
    20                                  ;---------------------------------------------------------------------
    21                                  ; STACK SIZE definition
    22                                  ;---------------------------------------------------------------------
    23  00000400h                       STACKSIZE	.equ	400h
    24                                  
    25                                  ;---------------------------------------------------------------------
    26                                  ; INTERRUPT STACK SIZE definition
    27                                  ;---------------------------------------------------------------------
    28  00000200h                       ISTACKSIZE	.equ	200h
    29                                  
    30                                  ;---------------------------------------------------------------------
    31                                  ; INTERRUPT VECTOR ADDRESS  definition
    32                                  ;---------------------------------------------------------------------
    33                                  ;VECTOR_ADR 	.equ	0ff6a0h
    34  000FFF1Ah                       VECTOR_ADR 		.equ	0fff1ah			;original program,denoted by LDH
    35                                  ;VECTOR_ADR_RAM	.equ	400h
    36                                  
    37                                  ;---------------------------------------------------------------------
    38                                  ; INTERRUPT VECTOR SIZE definition
    39                                  ;---------------------------------------------------------------------
    40  00000080h                       VECTOR_ADR_RAM_SIZE	.equ	128			;added by LDH,32*4=128
    41                                  
    42                                  ;---------------------------------------------------------------
    43                                  ; special page defination
    44                                  ;---------------------------------------------------------------
    45                                  ;       macro define for special page
    46                                  ;
    47                                  ;Format:
    48                                  ;	SPECIAL	number
    49                                  ;
    50                                  
    51                             D    SPECIAL	.macro	NUM
    52                             D    	.org	0FFFFEH-(NUM*2)
    53                             D    	.glb	__SPECIAL_@NUM
    54                             D    	.word	__SPECIAL_@NUM  & 0FFFFH
    55                                  .endm
    56                                  ;---------------------------------------------------------------------
    57                                  ; Section allocation
    58                                  ;---------------------------------------------------------------------
    59                                  	.list OFF
    60                                  	.list ON
    61                                  
    62                                  ;---------------------------------------------------------------------
* R8C/Tiny,M16C SERIES ASSEMBLER *   SOURCE LIST       Thu Apr 15 08:52:19 2010  PAGE 002

  SEQ.  LOC.   OBJ.              0XMSDA ....*....SOURCE STATEMENT....7....*....8....*....9....*....0....*....1....*....2....*....3....*....4

    63                                  ; SBDATA area definition
    64                                  ;---------------------------------------------------------------------
    65                                  	.glb	__SB__
    66  00000400h                       __SB__	.equ	data_SE_top
    67                                  
    68                                  ;====================================================================
    69                                  ; Initialize Macro declaration
    70                                  ;---------------------------------------------------------------------
    71                             D    N_BZERO	.macro	TOP_ ,SECT_
    72                             D    	mov.b	#00H, R0L
    73                             D    	mov.w	#(TOP_ & 0FFFFH), A1
    74                             D    	mov.w	#sizeof SECT_ , R3
    75                             D    	sstr.b	
    76                                  	.endm
    77                                  
    78                             D    N_BCOPY .macro	FROM_,TO_,SECT_
    79                             D    	mov.w	#(FROM_ & 0FFFFH),A0
    80                             D    	mov.b	#(FROM_ >>16),R1H
    81                             D    	mov.w	#TO_ ,A1
    82                             D    	mov.w	#sizeof SECT_ , R3
    83                             D    	smovf.b
    84                                  	.endm
    85                                  
    86                             D    BZERO	.macro	TOP_,SECT_
    87                             D    	push.w	#sizeof SECT_ >> 16
    88                             D    	push.w	#sizeof SECT_  & 0ffffh
    89                             D    	pusha	TOP_ >>16
    90                             D    	pusha	TOP_ & 0ffffh
    91                             D    
    92                             D    	.glb	_bzero	
    93                             D    	jsr.a	_bzero
    94                                  	.endm
    95                                  
    96                                  
    97                             D    BCOPY	.macro	FROM_ ,TO_ ,SECT_
    98                             D    	push.w	#sizeof SECT_  >> 16
    99                             D    	push.w	#sizeof SECT_  & 0ffffh
   100                             D    	pusha	TO_ >>16
   101                             D    	pusha	TO_  & 0ffffh
   102                             D    	pusha	FROM_ >>16
   103                             D    	pusha	FROM_  & 0ffffh
   104                             D    
   105                             D    	.glb	_bcopy
   106                             D    	jsr.a	_bcopy
   107                                  	.endm
   108                                  
   109                                  ;====================================================================
   110                                  ; Interrupt section start
   111                                  ;---------------------------------------------------------------------
   112                                  	.glb	start
   113                                  	.section	interrupt
   114  00000                           start:
   115                                  ;---------------------------------------------------------------------
   116                                  ; after reset,this program will start
   117                                  ;---------------------------------------------------------------------
   118  00000  EB400000r                	ldc	#istack_top,isp		;set istack pointer
   119  00004  7E9F5100                 	bset	1,0ah
   120  00008  B70400                Z  	mov.b	#00h,04h		;set processer mode 
   121  0000B  7E8F5100                 	bclr	1,0ah
   122  0000F  EB308000                 	ldc	#0080h,	flg
   123  00013  EB500000r                	ldc	#stack_top,	sp		;set stack pointer 
   124  00017  EB600004                 	ldc	#data_SE_top,sb		;set sb register 
* R8C/Tiny,M16C SERIES ASSEMBLER *   SOURCE LIST       Thu Apr 15 08:52:19 2010  PAGE 003

  SEQ.  LOC.   OBJ.              0XMSDA ....*....SOURCE STATEMENT....7....*....8....*....9....*....0....*....1....*....2....*....3....*....4

   125  0001B  EB200F00                 	ldintb	#VECTOR_ADR		;original program,denoted by LDH
               EB101AFF 
   126                                  	;ldintb	#VECTOR_ADR_RAM	;added by LDH
   127                                  	
   128  00023  EB64                     	fset	i
   129                                  	
   130                                  
   131                                  
   132                                  ;====================================================================
   133                                  ; NEAR area initialize.
   134                                  ;--------------------------------------------------------------------
   135                                  ; bss zero clear
   136                                  ;--------------------------------------------------------------------
   137                                  ;====================================================================
   138                                  ; When PowerUp do some initialize,like checking power down,
   139                                  ; delay three second,total display.
   140                                  ;--------------------------------------------------------------------
   141                                          .glb    _PowerUpProcese
   142  00025  FD000000r             A          jsr.a   _PowerUpProcese
   143                                  ;--------------------------------------------------------------------	
   144                                  	
   145                                  ;---------------------------------------------------------------------
   146                                  ; initialize data section
   147                                          .glb    _DemandPowerUpShift
   148  00029  FD000000r             A  	jsr.a   _DemandPowerUpShift
   149                                  	
   150                                  	
   151                                  ;---------------------------------------------------------------------
   152                                  	N_BZERO	bss_SE_top,bss_SE
   153  0002D  B4                  M Z  	mov.b	#00H, R0L
   154  0002E  AA0000r             M S  	mov.w	#(bss_SE_top & 0FFFFH), A1
   155  00031  75C30000r           M    	mov.w	#sizeof bss_SE , R3
   156  00035  7CEA                M    	sstr.b	
   157                             M    	.endm
   158                                  	N_BZERO	bss_SO_top,bss_SO
   159  00037  B4                  M Z  	mov.b	#00H, R0L
   160  00038  AA0000r             M S  	mov.w	#(bss_SO_top & 0FFFFH), A1
   161  0003B  75C30000r           M    	mov.w	#sizeof bss_SO , R3
   162  0003F  7CEA                M    	sstr.b	
   163                             M    	.endm
   164                                  	N_BZERO	bss_NE_top,bss_NE
   165  00041  B4                  M Z  	mov.b	#00H, R0L
   166  00042  AA0000r             M S  	mov.w	#(bss_NE_top & 0FFFFH), A1
   167  00045  75C30000r           M    	mov.w	#sizeof bss_NE , R3
   168  00049  7CEA                M    	sstr.b	
   169                             M    	.endm
   170                                  	N_BZERO	bss_NO_top,bss_NO
   171  0004B  B4                  M Z  	mov.b	#00H, R0L
   172  0004C  AA0000r             M S  	mov.w	#(bss_NO_top & 0FFFFH), A1
   173  0004F  75C30000r           M    	mov.w	#sizeof bss_NO , R3
   174  00053  7CEA                M    	sstr.b	
   175                             M    	.endm
   176                                  
   177                                  ;---------------------------------------------------------------------
   178                                  	.glb    _DemandPowerUpResume
   179  00055  FD000000r             A  	jsr.a   _DemandPowerUpResume
   180                                  ;---------------------------------------------------------------------
   181                                  	N_BCOPY data_SEI_top,data_SE_top,data_SE
   182  00059  A20000r             M S  	mov.w	#(data_SEI_top & 0FFFFH),A0
   183  0005C  74C300r             M    	mov.b	#(data_SEI_top >>16),R1H
   184  0005F  AA0004              M S  	mov.w	#data_SE_top ,A1
   185  00062  75C30000r           M    	mov.w	#sizeof data_SE , R3
* R8C/Tiny,M16C SERIES ASSEMBLER *   SOURCE LIST       Thu Apr 15 08:52:19 2010  PAGE 004

  SEQ.  LOC.   OBJ.              0XMSDA ....*....SOURCE STATEMENT....7....*....8....*....9....*....0....*....1....*....2....*....3....*....4

   186  00066  7CE8                M    	smovf.b
   187                             M    	.endm
   188                                  	N_BCOPY	data_SOI_top,data_SO_top,data_SO
   189  00068  A20000r             M S  	mov.w	#(data_SOI_top & 0FFFFH),A0
   190  0006B  74C300r             M    	mov.b	#(data_SOI_top >>16),R1H
   191  0006E  AA0000r             M S  	mov.w	#data_SO_top ,A1
   192  00071  75C30000r           M    	mov.w	#sizeof data_SO , R3
   193  00075  7CE8                M    	smovf.b
   194                             M    	.endm
   195                                  	N_BCOPY	data_NEI_top,data_NE_top,data_NE
   196  00077  A20000r             M S  	mov.w	#(data_NEI_top & 0FFFFH),A0
   197  0007A  74C300r             M    	mov.b	#(data_NEI_top >>16),R1H
   198  0007D  AA0000r             M S  	mov.w	#data_NE_top ,A1
   199  00080  75C30000r           M    	mov.w	#sizeof data_NE , R3
   200  00084  7CE8                M    	smovf.b
   201                             M    	.endm
   202                                  	N_BCOPY	data_NOI_top,data_NO_top,data_NO
   203  00086  A20000r             M S  	mov.w	#(data_NOI_top & 0FFFFH),A0
   204  00089  74C300r             M    	mov.b	#(data_NOI_top >>16),R1H
   205  0008C  AA0000r             M S  	mov.w	#data_NO_top ,A1
   206  0008F  75C30000r           M    	mov.w	#sizeof data_NO , R3
   207  00093  7CE8                M    	smovf.b
   208                             M    	.endm
   209                                  	
   210                                  ;---------------------------------------------------------------------	
   211                                  	
   212                                  	
   213                                  	
   214                                  
   215                                  ;====================================================================
   216                                  ; FAR area initialize.
   217                                  ;---------------------------------------------------------------------
   218                                  ; bss zero clear
   219                                  ;---------------------------------------------------------------------
   220                                  	BZERO	bss_FE_top,bss_FE
   221  00095  7DE20000r           M    	push.w	#sizeof bss_FE >> 16
   222  00099  7DE20000r           M    	push.w	#sizeof bss_FE  & 0ffffh
   223  0009D  7D9F0000r           M    	pusha	bss_FE_top >>16
   224  000A1  7D9F0000r           M    	pusha	bss_FE_top & 0ffffh
   225                             M    
   226                             M    	.glb	_bzero	
   227  000A5  FD000000r           M A  	jsr.a	_bzero
   228                             M    	.endm
   229                                  	BZERO	bss_FO_top,bss_FO
   230  000A9  7DE20000r           M    	push.w	#sizeof bss_FO >> 16
   231  000AD  7DE20000r           M    	push.w	#sizeof bss_FO  & 0ffffh
   232  000B1  7D9F0000r           M    	pusha	bss_FO_top >>16
   233  000B5  7D9F0000r           M    	pusha	bss_FO_top & 0ffffh
   234                             M    
   235                             M    	.glb	_bzero	
   236  000B9  FD000000r           M A  	jsr.a	_bzero
   237                             M    	.endm
   238                                  
   239                                  ;---------------------------------------------------------------------
   240                                  ; Copy edata_E(O) section from edata_EI(OI) section
   241                                  ;---------------------------------------------------------------------
   242                                  	BCOPY	data_FEI_top,data_FE_top,data_FE
   243  000BD  7DE20000r           M    	push.w	#sizeof data_FE  >> 16
   244  000C1  7DE20000r           M    	push.w	#sizeof data_FE  & 0ffffh
   245  000C5  7D9F0100            M    	pusha	data_FE_top >>16
   246  000C9  7D9F0000            M    	pusha	data_FE_top  & 0ffffh
   247  000CD  7D9F0000r           M    	pusha	data_FEI_top >>16
* R8C/Tiny,M16C SERIES ASSEMBLER *   SOURCE LIST       Thu Apr 15 08:52:19 2010  PAGE 005

  SEQ.  LOC.   OBJ.              0XMSDA ....*....SOURCE STATEMENT....7....*....8....*....9....*....0....*....1....*....2....*....3....*....4

   248  000D1  7D9F0000r           M    	pusha	data_FEI_top  & 0ffffh
   249                             M    
   250                             M    	.glb	_bcopy
   251  000D5  FD000000r           M A  	jsr.a	_bcopy
   252                             M    	.endm
   253                                  	BCOPY	data_FOI_top,data_FO_top,data_FO
   254  000D9  7DE20000r           M    	push.w	#sizeof data_FO  >> 16
   255  000DD  7DE20000r           M    	push.w	#sizeof data_FO  & 0ffffh
   256  000E1  7D9F0000r           M    	pusha	data_FO_top >>16
   257  000E5  7D9F0000r           M    	pusha	data_FO_top  & 0ffffh
   258  000E9  7D9F0000r           M    	pusha	data_FOI_top >>16
   259  000ED  7D9F0000r           M    	pusha	data_FOI_top  & 0ffffh
   260                             M    
   261                             M    	.glb	_bcopy
   262  000F1  FD000000r           M A  	jsr.a	_bcopy
   263                             M    	.endm
   264                                  
   265  000F5  EB500000r                	ldc	#stack_top,sp
   266                                  
   267                                  ;====================================================================
   268                                  ; heap area initialize
   269                                  ;---------------------------------------------------------------------
   270                                  	.glb	__mbase
   271                                  	.glb	__mnext
   272                                  	.glb	__msize
   273  000F9  75CF0000r0000r           	mov.w	#(heap_top&0FFFFH), __mbase
   274  000FF  75CF0000r0000r           	mov.w	#(heap_top>>16), __mbase+2
   275  00105  75CF0000r0000r           	mov.w	#(heap_top&0FFFFH), __mnext
   276  0010B  75CF0000r0000r           	mov.w	#(heap_top>>16), __mnext+2
   277  00111  D90F0000r             Q  	mov.w	#(HEAPSIZE&0FFFFH), __msize
   278  00115  D90F0000r             Q  	mov.w	#(HEAPSIZE>>16), __msize+2
   279                                  
   280                                  ;====================================================================
   281                                  ; Initialize standard I/O
   282                                  ;---------------------------------------------------------------------
   283                                  ;;	.glb	_init
   284                                  ;;	jsr.a	_init
   285                                  
   286                                  
   287                                  ;====================================================================
   288                                  ; Call main() function
   289                                  ;---------------------------------------------------------------------
   290  00119  EB700000                 	ldc	#0h,fb	; for debuger
   291                                  
   292                                  	.glb	_main
   293  0011D  FD000000r             A  	jsr.a	_main
   294                                  
   295                                  ;====================================================================
   296                                  ; exit() function
   297                                  ;---------------------------------------------------------------------
   298                                  	.glb	_exit
   299                                  	.glb	$exit
   300  00121                           _exit:			   ; End program
   301  00121                           $exit:
   302  00121  FEFF                  B  	jmp	_exit
   303                                  
   304                                  ;====================================================================
   305                                  ; dummy interrupt function
   306                                  ;---------------------------------------------------------------------
   307  00123                           dummy_int:
   308  00123  FB                       	reit
   309                                  	.end

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     00309   LINES

Section List

Attr        Size          Name
DATA     0000000(00000H)  VECTOR_TABLE
DATA     0000000(00000H)  data_SE
DATA     0000000(00000H)  bss_SE
DATA     0000000(00000H)  data_SO
DATA     0000000(00000H)  bss_SO
DATA     0000000(00000H)  data_NE
DATA     0000000(00000H)  bss_NE
DATA     0000000(00000H)  data_NO
DATA     0000000(00000H)  bss_NO
DATA     0001536(00600H)  stack
DATA     0000000(00000H)  heap
ROMDATA  0000000(00000H)  rom_NE
ROMDATA  0000000(00000H)  rom_NO
DATA     0000000(00000H)  data_FE
DATA     0000000(00000H)  bss_FE
DATA     0000000(00000H)  data_FO
DATA     0000000(00000H)  bss_FO
ROMDATA  0000000(00000H)  UserROMData_FE
ROMDATA  0000000(00000H)  UserROMData_FO
ROMDATA  0000000(00000H)  rom_FE
ROMDATA  0000000(00000H)  rom_FO
ROMDATA  0000000(00000H)  data_SEI
ROMDATA  0000000(00000H)  data_SOI
ROMDATA  0000000(00000H)  data_NEI
ROMDATA  0000000(00000H)  data_NOI
ROMDATA  0000000(00000H)  data_FEI
ROMDATA  0000000(00000H)  data_FOI
ROMDATA  0000000(00000H)  switch_table
CODE     0000000(00000H)  interrupt
CODE     0000000(00000H)  program
CODE     0000000(00000H)  program_S
CODE     0000192(000C0H)  vector
CODE     0000036(00024H)  fvector
CODE     0000292(00124H)  interrupt
